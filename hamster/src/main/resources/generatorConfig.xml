<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	<properties resource="application.properties" />

	<!--<classPathEntry location="${gererator.location}" /> -->

	<context id="hamsterDB" targetRuntime="MyBatis3" defaultModelType="flat">

		<!-- 生成的pojo，将implements Serializable -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>



		<!-- 注释 -->
        <commentGenerator>
            <property name="suppressAllComments" value="true" /><!-- 是否取消注释 -->
            <!-- <property name="suppressDate" value="true" />  是否生成注释代时间戳 -->
        </commentGenerator>


	 	<!-- 数据库链接URL、用户名、密码 -->
		<jdbcConnection connectionURL="${spring.datasource.url}"
			driverClass="${spring.datasource.driver-class-name}"
			password="${spring.datasource.password}"
			userId="${spring.datasource.username}" />



		<!-- 生成model模型，对应的包路径，以及文件存放路径(targetProject)，
		     targetProject可以指定具体的路径,如./src/main/java，
             也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下 -->
		<javaModelGenerator targetPackage="com.example.hamster.entity" targetProject="hamster/src/main/java">
			<!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->
            <property name="enableSubPackages" value="false" />
            <!-- 从数据库返回的值被清理前后的空格 -->
            <property name="trimStrings" value="true" />
		</javaModelGenerator>



		<!--对应的mapper.xml文件 -->
        <sqlMapGenerator targetPackage="mapping" targetProject="hamster/src/main/resources">
            <property name="enableSubPackages" value="false" />
        </sqlMapGenerator>


		<!-- 对应的dao接口 -->
        <javaClientGenerator targetPackage="com.example.hamster.mapper" type="XMLMAPPER"
        	targetProject="hamster/src/main/java">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>


		<!-- 列出要生成代码的所有表，这里配置的是不生成Example文件 -->
         <!-- postgresql的话应该是schema名称而不是数据库名
              tableName为对应的数据库表(所有表的话就填写 % )
              domainObjectName是要生成的实体类
              enable*ByExample是否生成 example类   -->
         <table tableName="%" schema="public"

             enableCountByExample="true" enableUpdateByExample="true"
             enableDeleteByExample="true" enableSelectByExample="true"
             selectByExampleQueryId="true">
             <!-- 忽略列，不生成bean 字段
             <ignoreColumn column="FRED" />-->
             <!-- 指定列的java数据类型
             <columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" />  -->
             <!-- 用于指定生成实体类时是否使用实际的列名作为实体类的属性名。false是 Camel Case风格-->
             <property name="useActualColumnNames" value="false" />
         </table>


	</context>
</generatorConfiguration>